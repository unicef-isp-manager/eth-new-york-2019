# auto detects a good number of processes to run
worker_processes auto;

#Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 8000;
    # Tells the worker to accept multiple connections at a time
    multi_accept on;
}


http {
    # this is a simple workaround to get the actual size of the file
    # without compression being delivered to the client.
    # The future api should handle this adding a new header and
    # setting it accordingly
    map $uri $json_data_content_length {
      default                   0;
      /shape.json               2848474;
      /c/brazil/shape.json      45111169;
      /c/nepal/shape.json       928084;
      /c/indonesia/shape.json   14508303;
      /c/nigeria/shape.json     1317677;
      /c/colombia/shape.json    4801007;
      /c/mexico/shape.json      17713051;
      /c/costa-rica/shape.json  523057;
      /c/pakistan/shape.json    1858606;
    }

    # what times to include
    include       /etc/nginx/mime.types;
    # what is the default one
    default_type  application/octet-stream;

    # Sets the path, format, and configuration for a buffered log write
    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent"';

    server {
        # listen on port 80
        listen 80;
        # save logs here
        access_log /var/log/nginx/access.log compression;

        # enable serving static gzipped content
        gzip_static on;
        gzip_proxied expired no-cache no-store private auth;
        # make sure that dynamic gzip is turned off
        gzip off;

        # where the root here
        root /var/www;
        # what file to server as index
        index index.html index.htm;

        # expose Content-Length header
        add_header 'Access-Control-Expose-Headers' 'Content-Length';

        location / {
            # First attempt to serve request as file, then
            # fall back to redirecting to index.html
            try_files $uri /index.html;
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
        }

        # no cache for service worker
        location = /service-worker.js {
            try_files $uri =404;
            expires off;
            access_log off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Javascript and CSS files
        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # Any route containing a file extension (e.g. /shape.json)
        location ~ ^.+\..+$ {
            add_header 'X-Original-Content-Length' $json_data_content_length;
            try_files $uri =404;
        }
    }
}
